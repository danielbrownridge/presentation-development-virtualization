===============================
Development with virtualization
===============================

Daniel Brownridge

Software Architect, Yobota

January 2019

Overview
========

* Goals
* Current state of development
* Background on Virtualization
* Introduce the specific technologies
* Demonstration
* Question & Answers

Non goals
=========

This talk will not be about:

* Detailed tutorials
* Solutions to your specific use case
* Hosted infrastructure

Goals
=====

This talk will be about:

* Making your life easier
* Local development
* Unlocking the hidden power of your laptop
* Gaining an understanding of Virtualization
* Showing the kinds of problems that can be solved 
* Introducing a practical toolkit of related technologies
* Giving you ideas on where to go next

Current state of development
============================

We have some problems to solve:

* Development / Production mismatch
* Complexity of development environment configuration
* Testing System Architecture
* Consistency of development environments

What is the Development / Production mismatch?
==============================================

Loads of differences between development environments and production infrastructure:

* Different Operating Systems
* Different library versions
* Different hardware
* Different configuration

Why is setting setting up a development environment hard?
=========================================================

* Lots to do - many things to install
* Constant change - package and library versions change
* Documentation is often:

  * out of date
  * incomplete
  * badly written
  * non-existent

* Requires very specific knowledge / skillset (e.g. Unix commands)

How do you test system architecture?
====================================

Testing code is hard enough, but how do you test a multi component system?

* How do you test deployment or build processes?
* How do you test network issues?
* How do you test how different components interact? 
* How do you test multiple instances of your app running conncurrently?

Why is development environment consistency hard?
================================================

 * Even if they exist, people don't or won't or mis-read instructions
 * Development involves breaking things
 * Bug-fixing can put your environment in a weird state
 * But it works on my machine!
 * Hack it till it works but:
   
   * can't remember or
   * don't understand or
   * don't care
   
   ... how or why it works?
 * People install random things because they need to or feel like it

What are the consequences of all this?
======================================

 * stress and frustration
 * really hard to reproduce bugs
 * bugs are caught late in the day
 * wasted time investigating non-issues
 * lower quality of code
 * reluctance to experiment for fear of failure

Virtualization can help!
========================

It is not a complete solution to everything, but what if:

* You didn't have to configure your development environment?
* If you broke it you could throw it away and get a new one?
* You knew your setup was exactly the same as everyone else?
* You could experiment with whole pieces of infrastucture 
  not just code?
* All the standard tools you need were just there?

What is virtualization?
=======================

A simple idea:

* Simulating a resource inside a computer

A resource can mean:

* Hardware (another computer)
* Operating System
* Network
* Storage
* and so on ...

Not a new concept:

* It existed on mainframes in the 60's

A big topic:

 * Many different kinds of virtualization

Types of virtualization
=======================

* Hardware Virtualization
* Desktop Virtualization
* Operating System Virtualization
* Network Virtualization
* Storage Virtualization
* Desktop Virtualization
* And many more niche variants  

Key ones we are going to focus on are:

 * Hardware
 * Operating System

Hardware virtualization
=======================

Basic idea is:

* Create the illusion of some real hardware inside your system

Goal is:

* Make the illusion good enough so you can't tell the difference 
* Importantly software running inside the illusion can't tell the difference 

How do you do this?

* Somehow provide the same instuction set and I/O as real hardware

Theory is:

* If the instuction set and I/O are the same, software will run the same

Implementation can be:

* Software only
* Hardware assisted

Software-based virtualization (Emulation)
=========================================

.. rst-class:: build

Simple idea:

* Write a simulation program with functions for each target machine instruction
* The functions just have to have the same inputs and outputs as your hardware
* Software run via your simulation program as if it was running on real hardware

Advantages:

* Can emulate any target architecture
* Lets you run software that was designed for a different hardware
* e.g. run software for an ARM CPU on an Intel CPU

Use cases:

* Developing embedded systems
* Running old console games

It works very well, however ...


Software-based virtualization (Emulation) 2
===========================================

What is the problem with simulating hardware in software?

* Re-creating the logical behaviour of a system is the easy bit
* Challenge is the non-functional parts e.g. timing.
* Most important factor is performance

Key point:

* Hardware simulated in software incurs a huge performance hit
* Can be less than 50% of host system

Software-based virtualization (Emulation) 3
===========================================

Limited to quite specific situations

Useful in situations where:

* You don't care about performance - testing logical correctness
* Your parent system is significantly more powerful than what you are simulating 

Consequences are:

* Emulation is useful where wasted performance is outweight by benefits brought from of abstraction
* Not suitable when you need to use all available resources
* For normal development the benefits typically don't outweight the costs

Implementations:

* Literally hundreds
* QEMU is an important project

Hardware-assisted hardware virtualization
=========================================

Goal:

* Avoid the performance penalty incured by software-based virtualization
* Run full operating systems un-modified in virtual machines on a host system

Basic idea:

* Allow the virtual machine to use the raw hardware of the host system

Problem:

* Much easier said than done
* If host software (an OS) is already running the VM can't get the whole hardware unmodified
* But if the VM gets modified hardware you're back to software virtualization

Hardware-assisted hardware virtualization 2
===========================================

So how can this work?

* Host system has to somehow manage and allocate resources to virtual machines
* A system is needed to manage the resources of the host - this is called a Hypervisor  

Two main approaches hypervisors take:

* Paravirtualization
* Full-virtualization

Paravirtualization
==================

A form of hardware virtualization where the hypervisor provides:

* access to system resources
* an API

Operating Systems are modified very slightly to use the Hypervisor API

* Virtual Machines are called paravirtualized guests
* It's a slight cheat
* It works very well in practice
* Achieves near raw system performance

Paravirtualization - Case study
===============================

Xen Project

* Publically released in 2003
* Started as a University of Cambridge research project
* Heavily used in industry
* Originally only supported Paravirtualization
* Now supports many modes of virtualization

.. figure:: /_static/xen-project.png

Intel virtualization (VT-x)
===========================

Basic idea:

* Add new special instructions to the x86 architecture to support virtual machines

How it works:

* 10 new instructions addded to the CPU - Virtual Machine Extensions (vmx)
* permit entering and exiting virtual execution mode
* guest OS thinks it's running as full priviledge
* host OS remains unaffected

Represents a major breakthrough:

* First introduced onto CPUs by Intel in November 2005
* Equivalent instuctions introduced by AMD

In many ways this technology triggered the modern era of cloud computing

Full hardware virtualization
============================

Escapes the trap:

* OS can run unmodified and at native performance in a host

How it works:

* The hypervisor uses Virtual Machines Extensions (vmx)
* Virtual Machines are created and hypervisor manages access to underlying resources

Consequences:

* Resources of physical hardware can be sliced up into isolated virtual machines
* Virtual machines perform near 100% of host resources - useable for real work
* Unlocks huge amount of possibilities and flexbility
* Virtual machines are tied to the same architecture as underlying system
* Not suitable for different target architecture

Types of Hypervisors
====================

Two main categories of hypervisors:

* Distinction is usecase

Type-1 - native or bare metal hypervisors

* hypervisor runs directly on the host hardware
* no normal operating system is running
* suitable for servers only
* Examples: Xen, Hyper-V, VmWare ESX

Type-2 - hosted hypervisors

* runs as a process in a host operating system
* operating system can be used as normal as well as host virtual machines
* suitable for servers and desktops
* Examples: VmWare Workstation, Virtualbox, Parallels Desktop

Hypervisor case study - Virtualbox
==================================

Virtualbox is a Type-2 hypervisor:

* Originally developed by Sun and now Oracle

Many compelling features:

* Fully open-source and free to use
* Runs on: Windows; macOS; Linux; Solaris
* Initially released 2007 - very stable codebase
* Supports hardware assisted virtualization with vmx
* Provides an external API for automation
* Virtual networking, graphics and storage

.. figure:: /_static/virtualbox.jpeg

Hypervisor case study - Virtualbox
==================================

What can you do with it?

* Define new virtual machines
* Allocate resources - upper limit of less than your host
* Install Operating systems from ISO images

Graphical:

* Can run a full desktop environment in a VM
* e.g. Run Windows Desktop in virtual machine on an Ubuntu Host
* Cool features - seamless mode

Servers:

* Ideal for running different server Operating Systems for developement 
* e.g. Can do Linux development on a Mac


Operating System virtualization - Containers
============================================

Operating System virtualization is also known as containerization

Goal:

* Application thinks it has it's own operating system
* Bundle libraries, tools and configuration together

How it works:

* Operating system kernel supports isolated user spaces - containers
* Container management software supports creating and managing containers

Consequences:

* Focus is on isolation of applications
* Lightweight and fast - no attempt to recreate a whole machine
* Limited to same operating system (kernel) as host machine
* Containers share resources such as memory so not truly isolated

Container case study - Docker
=============================

Docker performs operating system level virtualization

* Released in 2013
* Very popular
* Large online collection of container definitions for popular applications
* Widely supported by infrastructure providers e.g. Heroku, AWS, Azure

A managing process controls containers - dockerd

Images are downloaded and then registered:

* launching an application is very easy

.. figure:: /_static/docker.png

Virtual Machines versus Containers
==================================

Which should I use?

* Virtual machines are more heavyweight but give true isolation and OS independence
* Containers are lightweight but share resources and tie you to one kernel

Bottom line:

* goals overlap but they solve different problems.

Solution?

* Use both and get the best of both worlds
* Configure a virtual machine for the OS and put containers inside

Heroku does this:

* A 'stack' is underneath an AWS EC2 instance (virtual machine)
* A 'dyno' is a container

Remaining problems
==================

Virtualization techiniques make many things possible but:

* You still have configuration to worry about
* Configurating a virtual machine or a container can be a manual process
* Consistency errors can still creep in

Solution:

* automate with configuration management

Configuration Management
========================

Basic idea:

* Turn configuration into code

Consequences:

* Less reliance on documentation - cull the wiki
* Configuration can be put under source control
* Environment configuration exactly repeatable


Configuration Management case study - Vagrant
=============================================

Core goal:

* Automate the creation of virtual machines

Key features:

* supports many virtualization backends - Virtualbox; VmWare; Docker containers; AWS
* works with different provisioning tools
* Images called boxes can be loaded from an online library

.. figure:: /_static/vagrant.png

Example Vagrantfile
===================

Vagrantfile::

  #!/usr/bin/env ruby
  Vagrant.configure("2") do |config|
      config.vm.box = "ubuntu/xenial64"
      config.vm.hostname = "interaction"
      config.vm.network "forwarded_port", guest: 5000, host:5000, id: "heroku_local"
      config.vm.provision "ansible" do |ansible|
          ansible.galaxy_role_file = "requirements.yml"
          ansible.playbook = "playbook.yml"
      end
  end

Run it::

  $ vagrant up

Provisioning
============

Vagrant lets you delegate the actual configuration of the machine to a provisioner

Basic idea:

* Specify what you want installed on the machine

Options:

* Shell scripting
* Chef
* Puppet
* Ansible

Provisioning case study - Ansible
=================================

Basic idea:

* Write configuration in declarative style
* Say what should be done rather than how

How it works:

* Just needs SSH and Python
* Maintains an inventory of target hardware (more relevant to hosted infrastruture)
* A file called a playbook says what happens where
* Playbooks can be segmented into roles

   .. figure:: /_static/ansible.jpeg

Example playbook.yml
====================

playbook.yml::

   ---
   - hosts: all
   roles:
      - ansible-role-pgadmin4
      - ansible-role-redis
      - ansible-role-rqdashboard
      - ansible-role-minio
      - ansible-role-prometheus
      - ansible-role-heroku
      - ansible-role-sphinx
      - ansible-role-django-project

Example Role
============

main.yml::

   - become: yes
   block:
      - name: docker image
         docker_image:
         name: dpage/pgadmin4:snapshot
      - name: docker container
         docker_container:
         name: pgadmin4
         image: dpage/pgadmin4:snapshot
         network_mode: host
         env:
            PGADMIN_DEFAULT_EMAIL: vagrant
            PGADMIN_DEFAULT_PASSWORD: vagrant
            PGADMIN_LISTEN_PORT: 5050
         restart_policy: always

Role management - Ansible Galaxy
================================

Sharing roles between projects can be a challenge

Basic idea:

* Host roles in a central location

Ansible Galaxy lets you manage roles:

* both a tool and a website
* Ansible Galaxy website
* GitHub for private ones

What we've done so far
======================

* Step by step guide on how to setup your laptop
* Defined ansible roles for common tasks
* Integrations repos are running with Virtual Machines

Together this toolset integrates very nicely and essentially give you Heroku on your own laptop

Demonstration
=============
